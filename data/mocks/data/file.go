// Code generated by mockery v2.34.2. DO NOT EDIT.

package data

import (
	fs "io/fs"

	mock "github.com/stretchr/testify/mock"
)

// MockFile is an autogenerated mock type for the File type
type MockFile struct {
	mock.Mock
}

type MockFile_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFile) EXPECT() *MockFile_Expecter {
	return &MockFile_Expecter{mock: &_m.Mock}
}

// BaseName provides a mock function with given fields:
func (_m *MockFile) BaseName() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFile_BaseName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BaseName'
type MockFile_BaseName_Call struct {
	*mock.Call
}

// BaseName is a helper method to define mock.On call
func (_e *MockFile_Expecter) BaseName() *MockFile_BaseName_Call {
	return &MockFile_BaseName_Call{Call: _e.mock.On("BaseName")}
}

func (_c *MockFile_BaseName_Call) Run(run func()) *MockFile_BaseName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_BaseName_Call) Return(_a0 string) *MockFile_BaseName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_BaseName_Call) RunAndReturn(run func() string) *MockFile_BaseName_Call {
	_c.Call.Return(run)
	return _c
}

// Bytes provides a mock function with given fields:
func (_m *MockFile) Bytes() []byte {
	ret := _m.Called()

	var r0 []byte
	if rf, ok := ret.Get(0).(func() []byte); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// MockFile_Bytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Bytes'
type MockFile_Bytes_Call struct {
	*mock.Call
}

// Bytes is a helper method to define mock.On call
func (_e *MockFile_Expecter) Bytes() *MockFile_Bytes_Call {
	return &MockFile_Bytes_Call{Call: _e.mock.On("Bytes")}
}

func (_c *MockFile_Bytes_Call) Run(run func()) *MockFile_Bytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_Bytes_Call) Return(_a0 []byte) *MockFile_Bytes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_Bytes_Call) RunAndReturn(run func() []byte) *MockFile_Bytes_Call {
	_c.Call.Return(run)
	return _c
}

// Mode provides a mock function with given fields:
func (_m *MockFile) Mode() fs.FileMode {
	ret := _m.Called()

	var r0 fs.FileMode
	if rf, ok := ret.Get(0).(func() fs.FileMode); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(fs.FileMode)
	}

	return r0
}

// MockFile_Mode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Mode'
type MockFile_Mode_Call struct {
	*mock.Call
}

// Mode is a helper method to define mock.On call
func (_e *MockFile_Expecter) Mode() *MockFile_Mode_Call {
	return &MockFile_Mode_Call{Call: _e.mock.On("Mode")}
}

func (_c *MockFile_Mode_Call) Run(run func()) *MockFile_Mode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_Mode_Call) Return(_a0 fs.FileMode) *MockFile_Mode_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_Mode_Call) RunAndReturn(run func() fs.FileMode) *MockFile_Mode_Call {
	_c.Call.Return(run)
	return _c
}

// Path provides a mock function with given fields:
func (_m *MockFile) Path() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockFile_Path_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Path'
type MockFile_Path_Call struct {
	*mock.Call
}

// Path is a helper method to define mock.On call
func (_e *MockFile_Expecter) Path() *MockFile_Path_Call {
	return &MockFile_Path_Call{Call: _e.mock.On("Path")}
}

func (_c *MockFile_Path_Call) Run(run func()) *MockFile_Path_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockFile_Path_Call) Return(_a0 string) *MockFile_Path_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFile_Path_Call) RunAndReturn(run func() string) *MockFile_Path_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFile creates a new instance of MockFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFile {
	mock := &MockFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
