// Code generated by mockery v2.34.2. DO NOT EDIT.

package data

import (
	data "github.com/lukasjarosch/skipper/data"
	mock "github.com/stretchr/testify/mock"
)

// MockFileCodec is an autogenerated mock type for the FileCodec type
type MockFileCodec struct {
	mock.Mock
}

type MockFileCodec_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileCodec) EXPECT() *MockFileCodec_Expecter {
	return &MockFileCodec_Expecter{mock: &_m.Mock}
}

// Marshal provides a mock function with given fields: in
func (_m *MockFileCodec) Marshal(in interface{}) ([]byte, error) {
	ret := _m.Called(in)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]byte, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []byte); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileCodec_Marshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Marshal'
type MockFileCodec_Marshal_Call struct {
	*mock.Call
}

// Marshal is a helper method to define mock.On call
//   - in interface{}
func (_e *MockFileCodec_Expecter) Marshal(in interface{}) *MockFileCodec_Marshal_Call {
	return &MockFileCodec_Marshal_Call{Call: _e.mock.On("Marshal", in)}
}

func (_c *MockFileCodec_Marshal_Call) Run(run func(in interface{})) *MockFileCodec_Marshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockFileCodec_Marshal_Call) Return(_a0 []byte, _a1 error) *MockFileCodec_Marshal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileCodec_Marshal_Call) RunAndReturn(run func(interface{}) ([]byte, error)) *MockFileCodec_Marshal_Call {
	_c.Call.Return(run)
	return _c
}

// Unmarshal provides a mock function with given fields: _a0
func (_m *MockFileCodec) Unmarshal(_a0 []byte) (data.Map, error) {
	ret := _m.Called(_a0)

	var r0 data.Map
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (data.Map, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) data.Map); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(data.Map)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileCodec_Unmarshal_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unmarshal'
type MockFileCodec_Unmarshal_Call struct {
	*mock.Call
}

// Unmarshal is a helper method to define mock.On call
//   - _a0 []byte
func (_e *MockFileCodec_Expecter) Unmarshal(_a0 interface{}) *MockFileCodec_Unmarshal_Call {
	return &MockFileCodec_Unmarshal_Call{Call: _e.mock.On("Unmarshal", _a0)}
}

func (_c *MockFileCodec_Unmarshal_Call) Run(run func(_a0 []byte)) *MockFileCodec_Unmarshal_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *MockFileCodec_Unmarshal_Call) Return(_a0 data.Map, _a1 error) *MockFileCodec_Unmarshal_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFileCodec_Unmarshal_Call) RunAndReturn(run func([]byte) (data.Map, error)) *MockFileCodec_Unmarshal_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalPath provides a mock function with given fields: _a0, _a1, _a2
func (_m *MockFileCodec) UnmarshalPath(_a0 []byte, _a1 data.Path, _a2 interface{}) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, data.Path, interface{}) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileCodec_UnmarshalPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalPath'
type MockFileCodec_UnmarshalPath_Call struct {
	*mock.Call
}

// UnmarshalPath is a helper method to define mock.On call
//   - _a0 []byte
//   - _a1 data.Path
//   - _a2 interface{}
func (_e *MockFileCodec_Expecter) UnmarshalPath(_a0 interface{}, _a1 interface{}, _a2 interface{}) *MockFileCodec_UnmarshalPath_Call {
	return &MockFileCodec_UnmarshalPath_Call{Call: _e.mock.On("UnmarshalPath", _a0, _a1, _a2)}
}

func (_c *MockFileCodec_UnmarshalPath_Call) Run(run func(_a0 []byte, _a1 data.Path, _a2 interface{})) *MockFileCodec_UnmarshalPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(data.Path), args[2].(interface{}))
	})
	return _c
}

func (_c *MockFileCodec_UnmarshalPath_Call) Return(_a0 error) *MockFileCodec_UnmarshalPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileCodec_UnmarshalPath_Call) RunAndReturn(run func([]byte, data.Path, interface{}) error) *MockFileCodec_UnmarshalPath_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalTarget provides a mock function with given fields: _a0, _a1
func (_m *MockFileCodec) UnmarshalTarget(_a0 []byte, _a1 interface{}) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte, interface{}) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockFileCodec_UnmarshalTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalTarget'
type MockFileCodec_UnmarshalTarget_Call struct {
	*mock.Call
}

// UnmarshalTarget is a helper method to define mock.On call
//   - _a0 []byte
//   - _a1 interface{}
func (_e *MockFileCodec_Expecter) UnmarshalTarget(_a0 interface{}, _a1 interface{}) *MockFileCodec_UnmarshalTarget_Call {
	return &MockFileCodec_UnmarshalTarget_Call{Call: _e.mock.On("UnmarshalTarget", _a0, _a1)}
}

func (_c *MockFileCodec_UnmarshalTarget_Call) Run(run func(_a0 []byte, _a1 interface{})) *MockFileCodec_UnmarshalTarget_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte), args[1].(interface{}))
	})
	return _c
}

func (_c *MockFileCodec_UnmarshalTarget_Call) Return(_a0 error) *MockFileCodec_UnmarshalTarget_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFileCodec_UnmarshalTarget_Call) RunAndReturn(run func([]byte, interface{}) error) *MockFileCodec_UnmarshalTarget_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFileCodec creates a new instance of MockFileCodec. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileCodec(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileCodec {
	mock := &MockFileCodec{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
