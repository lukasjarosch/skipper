// Code generated by mockery v2.42.2. DO NOT EDIT.

package expression

import (
	expression "github.com/lukasjarosch/skipper/expression"
	mock "github.com/stretchr/testify/mock"
)

// MockNode is an autogenerated mock type for the Node type
type MockNode struct {
	mock.Mock
}

type MockNode_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNode) EXPECT() *MockNode_Expecter {
	return &MockNode_Expecter{mock: &_m.Mock}
}

// Position provides a mock function with given fields:
func (_m *MockNode) Position() expression.Pos {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Position")
	}

	var r0 expression.Pos
	if rf, ok := ret.Get(0).(func() expression.Pos); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(expression.Pos)
	}

	return r0
}

// MockNode_Position_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Position'
type MockNode_Position_Call struct {
	*mock.Call
}

// Position is a helper method to define mock.On call
func (_e *MockNode_Expecter) Position() *MockNode_Position_Call {
	return &MockNode_Position_Call{Call: _e.mock.On("Position")}
}

func (_c *MockNode_Position_Call) Run(run func()) *MockNode_Position_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNode_Position_Call) Return(_a0 expression.Pos) *MockNode_Position_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNode_Position_Call) RunAndReturn(run func() expression.Pos) *MockNode_Position_Call {
	_c.Call.Return(run)
	return _c
}

// Text provides a mock function with given fields:
func (_m *MockNode) Text() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Text")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockNode_Text_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Text'
type MockNode_Text_Call struct {
	*mock.Call
}

// Text is a helper method to define mock.On call
func (_e *MockNode_Expecter) Text() *MockNode_Text_Call {
	return &MockNode_Text_Call{Call: _e.mock.On("Text")}
}

func (_c *MockNode_Text_Call) Run(run func()) *MockNode_Text_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNode_Text_Call) Return(_a0 string) *MockNode_Text_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNode_Text_Call) RunAndReturn(run func() string) *MockNode_Text_Call {
	_c.Call.Return(run)
	return _c
}

// Type provides a mock function with given fields:
func (_m *MockNode) Type() expression.NodeType {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Type")
	}

	var r0 expression.NodeType
	if rf, ok := ret.Get(0).(func() expression.NodeType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(expression.NodeType)
	}

	return r0
}

// MockNode_Type_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Type'
type MockNode_Type_Call struct {
	*mock.Call
}

// Type is a helper method to define mock.On call
func (_e *MockNode_Expecter) Type() *MockNode_Type_Call {
	return &MockNode_Type_Call{Call: _e.mock.On("Type")}
}

func (_c *MockNode_Type_Call) Run(run func()) *MockNode_Type_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockNode_Type_Call) Return(_a0 expression.NodeType) *MockNode_Type_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNode_Type_Call) RunAndReturn(run func() expression.NodeType) *MockNode_Type_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNode creates a new instance of MockNode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNode(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNode {
	mock := &MockNode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
