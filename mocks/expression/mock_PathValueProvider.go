// Code generated by mockery v2.34.2. DO NOT EDIT.

package expression

import (
	data "github.com/lukasjarosch/skipper/data"

	mock "github.com/stretchr/testify/mock"
)

// MockPathValueProvider is an autogenerated mock type for the PathValueProvider type
type MockPathValueProvider struct {
	mock.Mock
}

type MockPathValueProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPathValueProvider) EXPECT() *MockPathValueProvider_Expecter {
	return &MockPathValueProvider_Expecter{mock: &_m.Mock}
}

// GetPath provides a mock function with given fields: _a0
func (_m *MockPathValueProvider) GetPath(_a0 data.Path) (interface{}, error) {
	ret := _m.Called(_a0)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(data.Path) (interface{}, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(data.Path) interface{}); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(data.Path) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPathValueProvider_GetPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPath'
type MockPathValueProvider_GetPath_Call struct {
	*mock.Call
}

// GetPath is a helper method to define mock.On call
//   - _a0 data.Path
func (_e *MockPathValueProvider_Expecter) GetPath(_a0 interface{}) *MockPathValueProvider_GetPath_Call {
	return &MockPathValueProvider_GetPath_Call{Call: _e.mock.On("GetPath", _a0)}
}

func (_c *MockPathValueProvider_GetPath_Call) Run(run func(_a0 data.Path)) *MockPathValueProvider_GetPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(data.Path))
	})
	return _c
}

func (_c *MockPathValueProvider_GetPath_Call) Return(_a0 interface{}, _a1 error) *MockPathValueProvider_GetPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPathValueProvider_GetPath_Call) RunAndReturn(run func(data.Path) (interface{}, error)) *MockPathValueProvider_GetPath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPathValueProvider creates a new instance of MockPathValueProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPathValueProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPathValueProvider {
	mock := &MockPathValueProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
