// Code generated by mockery v2.42.2. DO NOT EDIT.

package expression

import mock "github.com/stretchr/testify/mock"

// MockstateFn is an autogenerated mock type for the stateFn type
type MockstateFn struct {
	mock.Mock
}

type MockstateFn_Expecter struct {
	mock *mock.Mock
}

func (_m *MockstateFn) EXPECT() *MockstateFn_Expecter {
	return &MockstateFn_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0
func (_m *MockstateFn) Execute(_a0 *expression.lexer) expression.stateFn {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 expression.stateFn
	if rf, ok := ret.Get(0).(func(*expression.lexer) expression.stateFn); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(expression.stateFn)
		}
	}

	return r0
}

// MockstateFn_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockstateFn_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 *expression.lexer
func (_e *MockstateFn_Expecter) Execute(_a0 interface{}) *MockstateFn_Execute_Call {
	return &MockstateFn_Execute_Call{Call: _e.mock.On("Execute", _a0)}
}

func (_c *MockstateFn_Execute_Call) Run(run func(_a0 *expression.lexer)) *MockstateFn_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*expression.lexer))
	})
	return _c
}

func (_c *MockstateFn_Execute_Call) Return(_a0 expression.stateFn) *MockstateFn_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockstateFn_Execute_Call) RunAndReturn(run func(*expression.lexer) expression.stateFn) *MockstateFn_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockstateFn creates a new instance of MockstateFn. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockstateFn(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockstateFn {
	mock := &MockstateFn{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
