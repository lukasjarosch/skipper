// Code generated by mockery v2.42.2. DO NOT EDIT.

package skipper

import (
	data "github.com/lukasjarosch/skipper/v1/data"
	mock "github.com/stretchr/testify/mock"
)

// MockSetHookFunc is an autogenerated mock type for the SetHookFunc type
type MockSetHookFunc struct {
	mock.Mock
}

type MockSetHookFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSetHookFunc) EXPECT() *MockSetHookFunc_Expecter {
	return &MockSetHookFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: path, value
func (_m *MockSetHookFunc) Execute(path data.Path, value data.Value) error {
	ret := _m.Called(path, value)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(data.Path, data.Value) error); ok {
		r0 = rf(path, value)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSetHookFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockSetHookFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - path data.Path
//   - value data.Value
func (_e *MockSetHookFunc_Expecter) Execute(path interface{}, value interface{}) *MockSetHookFunc_Execute_Call {
	return &MockSetHookFunc_Execute_Call{Call: _e.mock.On("Execute", path, value)}
}

func (_c *MockSetHookFunc_Execute_Call) Run(run func(path data.Path, value data.Value)) *MockSetHookFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(data.Path), args[1].(data.Value))
	})
	return _c
}

func (_c *MockSetHookFunc_Execute_Call) Return(_a0 error) *MockSetHookFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSetHookFunc_Execute_Call) RunAndReturn(run func(data.Path, data.Value) error) *MockSetHookFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSetHookFunc creates a new instance of MockSetHookFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSetHookFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSetHookFunc {
	mock := &MockSetHookFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
