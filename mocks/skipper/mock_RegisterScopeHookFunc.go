// Code generated by mockery v2.42.2. DO NOT EDIT.

package skipper

import (
	skipper "github.com/lukasjarosch/skipper/v1"
	mock "github.com/stretchr/testify/mock"
)

// MockRegisterScopeHookFunc is an autogenerated mock type for the RegisterScopeHookFunc type
type MockRegisterScopeHookFunc struct {
	mock.Mock
}

type MockRegisterScopeHookFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRegisterScopeHookFunc) EXPECT() *MockRegisterScopeHookFunc_Expecter {
	return &MockRegisterScopeHookFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: scope, registry
func (_m *MockRegisterScopeHookFunc) Execute(scope skipper.Scope, registry *skipper.Registry) error {
	ret := _m.Called(scope, registry)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(skipper.Scope, *skipper.Registry) error); ok {
		r0 = rf(scope, registry)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRegisterScopeHookFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockRegisterScopeHookFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - scope skipper.Scope
//   - registry *skipper.Registry
func (_e *MockRegisterScopeHookFunc_Expecter) Execute(scope interface{}, registry interface{}) *MockRegisterScopeHookFunc_Execute_Call {
	return &MockRegisterScopeHookFunc_Execute_Call{Call: _e.mock.On("Execute", scope, registry)}
}

func (_c *MockRegisterScopeHookFunc_Execute_Call) Run(run func(scope skipper.Scope, registry *skipper.Registry)) *MockRegisterScopeHookFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(skipper.Scope), args[1].(*skipper.Registry))
	})
	return _c
}

func (_c *MockRegisterScopeHookFunc_Execute_Call) Return(_a0 error) *MockRegisterScopeHookFunc_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRegisterScopeHookFunc_Execute_Call) RunAndReturn(run func(skipper.Scope, *skipper.Registry) error) *MockRegisterScopeHookFunc_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRegisterScopeHookFunc creates a new instance of MockRegisterScopeHookFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRegisterScopeHookFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRegisterScopeHookFunc {
	mock := &MockRegisterScopeHookFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
