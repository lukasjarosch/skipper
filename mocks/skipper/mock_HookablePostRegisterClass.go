// Code generated by mockery v2.42.2. DO NOT EDIT.

package skipper

import (
	skipper "github.com/lukasjarosch/skipper"
	mock "github.com/stretchr/testify/mock"
)

// MockHookablePostRegisterClass is an autogenerated mock type for the HookablePostRegisterClass type
type MockHookablePostRegisterClass struct {
	mock.Mock
}

type MockHookablePostRegisterClass_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHookablePostRegisterClass) EXPECT() *MockHookablePostRegisterClass_Expecter {
	return &MockHookablePostRegisterClass_Expecter{mock: &_m.Mock}
}

// RegisterPostRegisterClassHook provides a mock function with given fields: _a0
func (_m *MockHookablePostRegisterClass) RegisterPostRegisterClassHook(_a0 skipper.RegisterClassHookFunc) {
	_m.Called(_a0)
}

// MockHookablePostRegisterClass_RegisterPostRegisterClassHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPostRegisterClassHook'
type MockHookablePostRegisterClass_RegisterPostRegisterClassHook_Call struct {
	*mock.Call
}

// RegisterPostRegisterClassHook is a helper method to define mock.On call
//   - _a0 skipper.RegisterClassHookFunc
func (_e *MockHookablePostRegisterClass_Expecter) RegisterPostRegisterClassHook(_a0 interface{}) *MockHookablePostRegisterClass_RegisterPostRegisterClassHook_Call {
	return &MockHookablePostRegisterClass_RegisterPostRegisterClassHook_Call{Call: _e.mock.On("RegisterPostRegisterClassHook", _a0)}
}

func (_c *MockHookablePostRegisterClass_RegisterPostRegisterClassHook_Call) Run(run func(_a0 skipper.RegisterClassHookFunc)) *MockHookablePostRegisterClass_RegisterPostRegisterClassHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(skipper.RegisterClassHookFunc))
	})
	return _c
}

func (_c *MockHookablePostRegisterClass_RegisterPostRegisterClassHook_Call) Return() *MockHookablePostRegisterClass_RegisterPostRegisterClassHook_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHookablePostRegisterClass_RegisterPostRegisterClassHook_Call) RunAndReturn(run func(skipper.RegisterClassHookFunc)) *MockHookablePostRegisterClass_RegisterPostRegisterClassHook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHookablePostRegisterClass creates a new instance of MockHookablePostRegisterClass. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHookablePostRegisterClass(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHookablePostRegisterClass {
	mock := &MockHookablePostRegisterClass{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
