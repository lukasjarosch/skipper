// Code generated by mockery v2.42.2. DO NOT EDIT.

package skipper

import (
	data "github.com/lukasjarosch/skipper/v1/data"
	mock "github.com/stretchr/testify/mock"
)

// MockDataWalker is an autogenerated mock type for the DataWalker type
type MockDataWalker struct {
	mock.Mock
}

type MockDataWalker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDataWalker) EXPECT() *MockDataWalker_Expecter {
	return &MockDataWalker_Expecter{mock: &_m.Mock}
}

// Walk provides a mock function with given fields: _a0
func (_m *MockDataWalker) Walk(_a0 func(data.Path, data.Value, bool) error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Walk")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(data.Path, data.Value, bool) error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockDataWalker_Walk_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Walk'
type MockDataWalker_Walk_Call struct {
	*mock.Call
}

// Walk is a helper method to define mock.On call
//   - _a0 func(data.Path , data.Value , bool) error
func (_e *MockDataWalker_Expecter) Walk(_a0 interface{}) *MockDataWalker_Walk_Call {
	return &MockDataWalker_Walk_Call{Call: _e.mock.On("Walk", _a0)}
}

func (_c *MockDataWalker_Walk_Call) Run(run func(_a0 func(data.Path, data.Value, bool) error)) *MockDataWalker_Walk_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(data.Path, data.Value, bool) error))
	})
	return _c
}

func (_c *MockDataWalker_Walk_Call) Return(_a0 error) *MockDataWalker_Walk_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDataWalker_Walk_Call) RunAndReturn(run func(func(data.Path, data.Value, bool) error) error) *MockDataWalker_Walk_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDataWalker creates a new instance of MockDataWalker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDataWalker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDataWalker {
	mock := &MockDataWalker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
