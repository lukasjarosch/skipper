// Code generated by mockery v2.42.2. DO NOT EDIT.

package skipper

import (
	skipper "github.com/lukasjarosch/skipper"
	mock "github.com/stretchr/testify/mock"
)

// MockHookablePostRegisterScope is an autogenerated mock type for the HookablePostRegisterScope type
type MockHookablePostRegisterScope struct {
	mock.Mock
}

type MockHookablePostRegisterScope_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHookablePostRegisterScope) EXPECT() *MockHookablePostRegisterScope_Expecter {
	return &MockHookablePostRegisterScope_Expecter{mock: &_m.Mock}
}

// RegisterPostRegisterScopeHook provides a mock function with given fields: _a0
func (_m *MockHookablePostRegisterScope) RegisterPostRegisterScopeHook(_a0 skipper.RegisterScopeHookFunc) {
	_m.Called(_a0)
}

// MockHookablePostRegisterScope_RegisterPostRegisterScopeHook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterPostRegisterScopeHook'
type MockHookablePostRegisterScope_RegisterPostRegisterScopeHook_Call struct {
	*mock.Call
}

// RegisterPostRegisterScopeHook is a helper method to define mock.On call
//   - _a0 skipper.RegisterScopeHookFunc
func (_e *MockHookablePostRegisterScope_Expecter) RegisterPostRegisterScopeHook(_a0 interface{}) *MockHookablePostRegisterScope_RegisterPostRegisterScopeHook_Call {
	return &MockHookablePostRegisterScope_RegisterPostRegisterScopeHook_Call{Call: _e.mock.On("RegisterPostRegisterScopeHook", _a0)}
}

func (_c *MockHookablePostRegisterScope_RegisterPostRegisterScopeHook_Call) Run(run func(_a0 skipper.RegisterScopeHookFunc)) *MockHookablePostRegisterScope_RegisterPostRegisterScopeHook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(skipper.RegisterScopeHookFunc))
	})
	return _c
}

func (_c *MockHookablePostRegisterScope_RegisterPostRegisterScopeHook_Call) Return() *MockHookablePostRegisterScope_RegisterPostRegisterScopeHook_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHookablePostRegisterScope_RegisterPostRegisterScopeHook_Call) RunAndReturn(run func(skipper.RegisterScopeHookFunc)) *MockHookablePostRegisterScope_RegisterPostRegisterScopeHook_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHookablePostRegisterScope creates a new instance of MockHookablePostRegisterScope. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHookablePostRegisterScope(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHookablePostRegisterScope {
	mock := &MockHookablePostRegisterScope{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
