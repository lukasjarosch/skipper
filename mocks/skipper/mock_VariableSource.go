// Code generated by mockery v2.42.2. DO NOT EDIT.

package skipper

import (
	data "github.com/lukasjarosch/skipper/data"
	mock "github.com/stretchr/testify/mock"
)

// MockVariableSource is an autogenerated mock type for the VariableSource type
type MockVariableSource struct {
	mock.Mock
}

type MockVariableSource_Expecter struct {
	mock *mock.Mock
}

func (_m *MockVariableSource) EXPECT() *MockVariableSource_Expecter {
	return &MockVariableSource_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields:
func (_m *MockVariableSource) GetAll() map[string]interface{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func() map[string]interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	return r0
}

// MockVariableSource_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type MockVariableSource_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
func (_e *MockVariableSource_Expecter) GetAll() *MockVariableSource_GetAll_Call {
	return &MockVariableSource_GetAll_Call{Call: _e.mock.On("GetAll")}
}

func (_c *MockVariableSource_GetAll_Call) Run(run func()) *MockVariableSource_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockVariableSource_GetAll_Call) Return(_a0 map[string]interface{}) *MockVariableSource_GetAll_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockVariableSource_GetAll_Call) RunAndReturn(run func() map[string]interface{}) *MockVariableSource_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetValue provides a mock function with given fields: _a0
func (_m *MockVariableSource) GetValue(_a0 string) (data.Value, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetValue")
	}

	var r0 data.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (data.Value, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) data.Value); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(data.Value)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockVariableSource_GetValue_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetValue'
type MockVariableSource_GetValue_Call struct {
	*mock.Call
}

// GetValue is a helper method to define mock.On call
//   - _a0 string
func (_e *MockVariableSource_Expecter) GetValue(_a0 interface{}) *MockVariableSource_GetValue_Call {
	return &MockVariableSource_GetValue_Call{Call: _e.mock.On("GetValue", _a0)}
}

func (_c *MockVariableSource_GetValue_Call) Run(run func(_a0 string)) *MockVariableSource_GetValue_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockVariableSource_GetValue_Call) Return(_a0 data.Value, _a1 error) *MockVariableSource_GetValue_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockVariableSource_GetValue_Call) RunAndReturn(run func(string) (data.Value, error)) *MockVariableSource_GetValue_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockVariableSource creates a new instance of MockVariableSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockVariableSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockVariableSource {
	mock := &MockVariableSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
