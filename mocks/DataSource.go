// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	skipper "github.com/lukasjarosch/skipper"
	mock "github.com/stretchr/testify/mock"
)

// DataSource is an autogenerated mock type for the DataSource type
type DataSource struct {
	mock.Mock
}

type DataSource_Expecter struct {
	mock *mock.Mock
}

func (_m *DataSource) EXPECT() *DataSource_Expecter {
	return &DataSource_Expecter{mock: &_m.Mock}
}

// HasPath provides a mock function with given fields: path
func (_m *DataSource) HasPath(path skipper.DataPath) bool {
	ret := _m.Called(path)

	var r0 bool
	if rf, ok := ret.Get(0).(func(skipper.DataPath) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DataSource_HasPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPath'
type DataSource_HasPath_Call struct {
	*mock.Call
}

// HasPath is a helper method to define mock.On call
//   - path skipper.DataPath
func (_e *DataSource_Expecter) HasPath(path interface{}) *DataSource_HasPath_Call {
	return &DataSource_HasPath_Call{Call: _e.mock.On("HasPath", path)}
}

func (_c *DataSource_HasPath_Call) Run(run func(path skipper.DataPath)) *DataSource_HasPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(skipper.DataPath))
	})
	return _c
}

func (_c *DataSource_HasPath_Call) Return(_a0 bool) *DataSource_HasPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataSource_HasPath_Call) RunAndReturn(run func(skipper.DataPath) bool) *DataSource_HasPath_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalPath provides a mock function with given fields: path, target
func (_m *DataSource) UnmarshalPath(path skipper.DataPath, target interface{}) error {
	ret := _m.Called(path, target)

	var r0 error
	if rf, ok := ret.Get(0).(func(skipper.DataPath, interface{}) error); ok {
		r0 = rf(path, target)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataSource_UnmarshalPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalPath'
type DataSource_UnmarshalPath_Call struct {
	*mock.Call
}

// UnmarshalPath is a helper method to define mock.On call
//   - path skipper.DataPath
//   - target interface{}
func (_e *DataSource_Expecter) UnmarshalPath(path interface{}, target interface{}) *DataSource_UnmarshalPath_Call {
	return &DataSource_UnmarshalPath_Call{Call: _e.mock.On("UnmarshalPath", path, target)}
}

func (_c *DataSource_UnmarshalPath_Call) Run(run func(path skipper.DataPath, target interface{})) *DataSource_UnmarshalPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(skipper.DataPath), args[1].(interface{}))
	})
	return _c
}

func (_c *DataSource_UnmarshalPath_Call) Return(_a0 error) *DataSource_UnmarshalPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataSource_UnmarshalPath_Call) RunAndReturn(run func(skipper.DataPath, interface{}) error) *DataSource_UnmarshalPath_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewDataSource interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataSource creates a new instance of DataSource. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataSource(t mockConstructorTestingTNewDataSource) *DataSource {
	mock := &DataSource{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
