// Code generated by mockery v2.34.2. DO NOT EDIT.

package skipper

import (
	data "github.com/lukasjarosch/skipper/data"
	mock "github.com/stretchr/testify/mock"
)

// MockReferenceSourceRelativeGetter is an autogenerated mock type for the ReferenceSourceRelativeGetter type
type MockReferenceSourceRelativeGetter struct {
	mock.Mock
}

type MockReferenceSourceRelativeGetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockReferenceSourceRelativeGetter) EXPECT() *MockReferenceSourceRelativeGetter_Expecter {
	return &MockReferenceSourceRelativeGetter_Expecter{mock: &_m.Mock}
}

// GetClassRelativePath provides a mock function with given fields: _a0, _a1
func (_m *MockReferenceSourceRelativeGetter) GetClassRelativePath(_a0 data.Path, _a1 data.Path) (data.Value, error) {
	ret := _m.Called(_a0, _a1)

	var r0 data.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(data.Path, data.Path) (data.Value, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(data.Path, data.Path) data.Value); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(data.Value)
	}

	if rf, ok := ret.Get(1).(func(data.Path, data.Path) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReferenceSourceRelativeGetter_GetClassRelativePath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClassRelativePath'
type MockReferenceSourceRelativeGetter_GetClassRelativePath_Call struct {
	*mock.Call
}

// GetClassRelativePath is a helper method to define mock.On call
//   - _a0 data.Path
//   - _a1 data.Path
func (_e *MockReferenceSourceRelativeGetter_Expecter) GetClassRelativePath(_a0 interface{}, _a1 interface{}) *MockReferenceSourceRelativeGetter_GetClassRelativePath_Call {
	return &MockReferenceSourceRelativeGetter_GetClassRelativePath_Call{Call: _e.mock.On("GetClassRelativePath", _a0, _a1)}
}

func (_c *MockReferenceSourceRelativeGetter_GetClassRelativePath_Call) Run(run func(_a0 data.Path, _a1 data.Path)) *MockReferenceSourceRelativeGetter_GetClassRelativePath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(data.Path), args[1].(data.Path))
	})
	return _c
}

func (_c *MockReferenceSourceRelativeGetter_GetClassRelativePath_Call) Return(_a0 data.Value, _a1 error) *MockReferenceSourceRelativeGetter_GetClassRelativePath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReferenceSourceRelativeGetter_GetClassRelativePath_Call) RunAndReturn(run func(data.Path, data.Path) (data.Value, error)) *MockReferenceSourceRelativeGetter_GetClassRelativePath_Call {
	_c.Call.Return(run)
	return _c
}

// GetPath provides a mock function with given fields: _a0
func (_m *MockReferenceSourceRelativeGetter) GetPath(_a0 data.Path) (data.Value, error) {
	ret := _m.Called(_a0)

	var r0 data.Value
	var r1 error
	if rf, ok := ret.Get(0).(func(data.Path) (data.Value, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(data.Path) data.Value); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(data.Value)
	}

	if rf, ok := ret.Get(1).(func(data.Path) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockReferenceSourceRelativeGetter_GetPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPath'
type MockReferenceSourceRelativeGetter_GetPath_Call struct {
	*mock.Call
}

// GetPath is a helper method to define mock.On call
//   - _a0 data.Path
func (_e *MockReferenceSourceRelativeGetter_Expecter) GetPath(_a0 interface{}) *MockReferenceSourceRelativeGetter_GetPath_Call {
	return &MockReferenceSourceRelativeGetter_GetPath_Call{Call: _e.mock.On("GetPath", _a0)}
}

func (_c *MockReferenceSourceRelativeGetter_GetPath_Call) Run(run func(_a0 data.Path)) *MockReferenceSourceRelativeGetter_GetPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(data.Path))
	})
	return _c
}

func (_c *MockReferenceSourceRelativeGetter_GetPath_Call) Return(_a0 data.Value, _a1 error) *MockReferenceSourceRelativeGetter_GetPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockReferenceSourceRelativeGetter_GetPath_Call) RunAndReturn(run func(data.Path) (data.Value, error)) *MockReferenceSourceRelativeGetter_GetPath_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockReferenceSourceRelativeGetter creates a new instance of MockReferenceSourceRelativeGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReferenceSourceRelativeGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReferenceSourceRelativeGetter {
	mock := &MockReferenceSourceRelativeGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
