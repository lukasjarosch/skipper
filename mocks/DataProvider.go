// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	skipper "github.com/lukasjarosch/skipper"
	mock "github.com/stretchr/testify/mock"
)

// DataProvider is an autogenerated mock type for the DataProvider type
type DataProvider struct {
	mock.Mock
}

type DataProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *DataProvider) EXPECT() *DataProvider_Expecter {
	return &DataProvider_Expecter{mock: &_m.Mock}
}

// GetPath provides a mock function with given fields: path
func (_m *DataProvider) GetPath(path skipper.Path) (interface{}, error) {
	ret := _m.Called(path)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(skipper.Path) (interface{}, error)); ok {
		return rf(path)
	}
	if rf, ok := ret.Get(0).(func(skipper.Path) interface{}); ok {
		r0 = rf(path)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(skipper.Path) error); ok {
		r1 = rf(path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DataProvider_GetPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPath'
type DataProvider_GetPath_Call struct {
	*mock.Call
}

// GetPath is a helper method to define mock.On call
//   - path skipper.Path
func (_e *DataProvider_Expecter) GetPath(path interface{}) *DataProvider_GetPath_Call {
	return &DataProvider_GetPath_Call{Call: _e.mock.On("GetPath", path)}
}

func (_c *DataProvider_GetPath_Call) Run(run func(path skipper.Path)) *DataProvider_GetPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(skipper.Path))
	})
	return _c
}

func (_c *DataProvider_GetPath_Call) Return(_a0 interface{}, _a1 error) *DataProvider_GetPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DataProvider_GetPath_Call) RunAndReturn(run func(skipper.Path) (interface{}, error)) *DataProvider_GetPath_Call {
	_c.Call.Return(run)
	return _c
}

// HasPath provides a mock function with given fields: path
func (_m *DataProvider) HasPath(path skipper.Path) bool {
	ret := _m.Called(path)

	var r0 bool
	if rf, ok := ret.Get(0).(func(skipper.Path) bool); ok {
		r0 = rf(path)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// DataProvider_HasPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasPath'
type DataProvider_HasPath_Call struct {
	*mock.Call
}

// HasPath is a helper method to define mock.On call
//   - path skipper.Path
func (_e *DataProvider_Expecter) HasPath(path interface{}) *DataProvider_HasPath_Call {
	return &DataProvider_HasPath_Call{Call: _e.mock.On("HasPath", path)}
}

func (_c *DataProvider_HasPath_Call) Run(run func(path skipper.Path)) *DataProvider_HasPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(skipper.Path))
	})
	return _c
}

func (_c *DataProvider_HasPath_Call) Return(_a0 bool) *DataProvider_HasPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataProvider_HasPath_Call) RunAndReturn(run func(skipper.Path) bool) *DataProvider_HasPath_Call {
	_c.Call.Return(run)
	return _c
}

// Keys provides a mock function with given fields:
func (_m *DataProvider) Keys() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// DataProvider_Keys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Keys'
type DataProvider_Keys_Call struct {
	*mock.Call
}

// Keys is a helper method to define mock.On call
func (_e *DataProvider_Expecter) Keys() *DataProvider_Keys_Call {
	return &DataProvider_Keys_Call{Call: _e.mock.On("Keys")}
}

func (_c *DataProvider_Keys_Call) Run(run func()) *DataProvider_Keys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *DataProvider_Keys_Call) Return(_a0 []string) *DataProvider_Keys_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataProvider_Keys_Call) RunAndReturn(run func() []string) *DataProvider_Keys_Call {
	_c.Call.Return(run)
	return _c
}

// UnmarshalPath provides a mock function with given fields: path, target, strict
func (_m *DataProvider) UnmarshalPath(path skipper.Path, target interface{}, strict bool) error {
	ret := _m.Called(path, target, strict)

	var r0 error
	if rf, ok := ret.Get(0).(func(skipper.Path, interface{}, bool) error); ok {
		r0 = rf(path, target, strict)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DataProvider_UnmarshalPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnmarshalPath'
type DataProvider_UnmarshalPath_Call struct {
	*mock.Call
}

// UnmarshalPath is a helper method to define mock.On call
//   - path skipper.Path
//   - target interface{}
//   - strict bool
func (_e *DataProvider_Expecter) UnmarshalPath(path interface{}, target interface{}, strict interface{}) *DataProvider_UnmarshalPath_Call {
	return &DataProvider_UnmarshalPath_Call{Call: _e.mock.On("UnmarshalPath", path, target, strict)}
}

func (_c *DataProvider_UnmarshalPath_Call) Run(run func(path skipper.Path, target interface{}, strict bool)) *DataProvider_UnmarshalPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(skipper.Path), args[1].(interface{}), args[2].(bool))
	})
	return _c
}

func (_c *DataProvider_UnmarshalPath_Call) Return(_a0 error) *DataProvider_UnmarshalPath_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *DataProvider_UnmarshalPath_Call) RunAndReturn(run func(skipper.Path, interface{}, bool) error) *DataProvider_UnmarshalPath_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewDataProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewDataProvider creates a new instance of DataProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDataProvider(t mockConstructorTestingTNewDataProvider) *DataProvider {
	mock := &DataProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
